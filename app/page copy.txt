"use client";

import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { addDoc, collection } from 'firebase/firestore';
import { db } from './firebase';

interface StudentData {
  registrationNumber: string;
  name: string;
  fatherName: string;
  fatherAddress: string;
  fatherOccupation: string;
  guardian: string;
  motherName: string;
  idNumber: string;
  birthPlace: string;
  birthDate: string;
  nationality: string;
  schoolEntryDate: string;
  acceptedClass: string;
  previousSchool: string;
  leaveDate: string;
}

interface GradesData {
  [subject: string]: string[];
}

export default function StudentRecord() {
  const initialSubjects = [
    'القرآن الكريم وتلاوته',
    'التربية الإسلامية',
    'اللغة العربية والخط',
    'اللغة الإنجليزية',
    'الرياضيات',
    'التاريخ',
    'الجغرافية',
    'التربية الوطنية',
    'التربية الاجتماعية والاخلاقية',
    'العلوم',
    'التربية الفنية والاعمال اليدوية',
    'التربية الرياضية',
    'النشيد والموسيقى',
    'التربية الاسرية',
    'التربية الزراعية',
    'المجموع',
    'ملاحظات عن النتائج',
    'النتيجة النهائية'
  ];

  const [selectedSubjects, setSelectedSubjects] = useState<string[]>(initialSubjects.slice(0, -3));
  const [showSettings, setShowSettings] = useState(false);

  const [studentData, setStudentData] = useState<StudentData>({
    registrationNumber: '',
    name: '',
    fatherName: '',
    fatherAddress: '',
    fatherOccupation: '',
    guardian: '',
    motherName: '',
    idNumber: '',
    birthPlace: '',
    birthDate: '',
    nationality: '',
    schoolEntryDate: '',
    acceptedClass: '',
    previousSchool: '',
    leaveDate: ''
  });

  const [grades, setGrades] = useState<GradesData>(() => {
    const initialGrades: GradesData = {};
    const allSubjects = [...selectedSubjects, 'المجموع', 'ملاحظات عن النتائج', 'النتيجة النهائية'];
    
    allSubjects.forEach(subject => {
      initialGrades[subject] = Array(9).fill('');
    });
    
    return initialGrades;
  });

  const handleSubjectSelection = (subject: string) => {
    setSelectedSubjects(prev => 
      prev.includes(subject) 
        ? prev.filter(s => s !== subject)
        : [...prev, subject]
    );
  };

  const handleGradeChange = (subject: string, gradeIndex: number, value: string) => {
    setGrades(prev => ({
      ...prev,
      [subject]: prev[subject].map((grade, index) => 
        index === gradeIndex ? value : grade
      )
    }));
  };

  const handleInputChange = (field: keyof StudentData, value: string) => {
    setStudentData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSave = async () => {
    try {
      const studentDoc = {
        personalInfo: studentData,
        grades: grades,
        selectedSubjects: selectedSubjects
      };

      await addDoc(collection(db, 'students'), studentDoc);
      alert('تم حفظ بيانات الطالب بنجاح!');
      
      // Reset form
      setStudentData({
        registrationNumber: '',
        name: '',
        fatherName: '',
        fatherAddress: '',
        fatherOccupation: '',
        guardian: '',
        motherName: '',
        idNumber: '',
        birthPlace: '',
        birthDate: '',
        nationality: '',
        schoolEntryDate: '',
        acceptedClass: '',
        previousSchool: '',
        leaveDate: ''
      });
      
      // Reset grades
      const resetGrades: GradesData = {};
      Object.keys(grades).forEach(subject => {
        resetGrades[subject] = Array(9).fill('');
      });
      setGrades(resetGrades);

    } catch (error) {
      console.error('Error saving data:', error);
      alert('حدث خطأ أثناء حفظ البيانات');
    }
  };

  const renderInputField = (label: string, field: keyof StudentData, type: string = 'text') => (
    <div>
      <Label>{label}</Label>
      <Input
        type={type}
        value={studentData[field]}
        onChange={(e) => handleInputChange(field, e.target.value)}
      />
    </div>
  );

  return (
    <div className="container mx-auto p-4 text-right" dir="rtl">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-primary">سجل القيد العام : ١</h1>
        <div className="space-x-4 space-x-reverse">
          <Button 
            onClick={() => setShowSettings(!showSettings)}
            variant="outline"
            size="lg"
          >
            إعدادات المواد
          </Button>
          <Button 
            variant="outline"
            size="lg"
          >
            إضافة صورة الطالب
          </Button>
        </div>
      </div>

      {showSettings && (
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>إعدادات المواد</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {initialSubjects.slice(0, -3).map(subject => (
                <div key={subject} className="flex items-center space-x-2 space-x-reverse">
                  <input
                    type="checkbox"
                    checked={selectedSubjects.includes(subject)}
                    onChange={() => handleSubjectSelection(subject)}
                    className="w-4 h-4"
                  />
                  <label>{subject}</label>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>المعلومات الشخصية</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
            {renderInputField('رقم القيد', 'registrationNumber', 'number')}
            {renderInputField('اسم الطالب', 'name')}
            {renderInputField('اسم الأب وشهرته', 'fatherName')}
            {renderInputField('مسكن الأب', 'fatherAddress')}
            {renderInputField('صنعة الأب وعنوانه', 'fatherOccupation')}
            {renderInputField('اسم ولي أمر الطالب', 'guardian')}
            {renderInputField('اسم الأم', 'motherName')}
          </div>
        </CardContent>
      </Card>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>المعلومات الاضافية</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
            {renderInputField('رقم دفتر نفوس الطالب', 'idNumber', 'number')}
            {renderInputField('مسقط الرأس', 'birthPlace')}
            {renderInputField('تاريخ الولادة', 'birthDate', 'date')}
            {renderInputField('الجنسية', 'nationality')}
            {renderInputField('تاريخ دخول المدرسة', 'schoolEntryDate', 'date')}
            {renderInputField('الصف الذي قبل فيه', 'acceptedClass')}
            {renderInputField('آخر مدرسة كان فيها', 'previousSchool')}
            {renderInputField('تاريخ المغادرة', 'leaveDate', 'date')}
          </div>
        </CardContent>
      </Card>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>درجات المواد</CardTitle>
        </CardHeader>
        <CardContent className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-right">المواد</TableHead>
                {Array.from({ length: 9 }, (_, i) => (
                  <TableHead key={i} className="text-center">الصف {i + 1}</TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {[...selectedSubjects, 'المجموع', 'ملاحظات عن النتائج', 'النتيجة النهائية'].map((subject) => (
                <TableRow key={subject}>
                  <TableCell className="font-medium bg-muted">{subject}</TableCell>
                  {Array.from({ length: 9 }, (_, i) => (
                    <TableCell key={i}>
                      <Input
                        value={grades[subject]?.[i] || ''}
                        onChange={(e) => handleGradeChange(subject, i, e.target.value)}
                        className="text-center"
                      />
                    </TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      <Button 
        size="lg" 
        onClick={handleSave}
        className="w-full"
      >
        حفظ بيانات الطالب
      </Button>
    </div>
  );
}